---
- name: Check if /etc/modules-load.d/k8s.conf exists
  ansible.builtin.stat:
    path: "/etc/modules-load.d/k8s.conf"
  register: k8s_conf_stat

- name: Add Modules to /etc/modules-load.d/k8s.conf
  ansible.builtin.blockinfile:
    path: "/etc/modules-load.d/k8s.conf"
    create: true
    block: |
      overlay
      br_netfilter
  when: not k8s_conf_stat.stat.exists

- name: Modprobe Command to Apply Modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Check if /etc/sysctl.d/k8s.conf exists
  ansible.builtin.stat:
    path: "/etc/sysctl.d/k8s.conf"
  register: sysctl_k8s_stat

- name: Create /etc/sysctl.d/k8s.conf
  ansible.builtin.file:
    path: "/etc/sysctl.d/k8s.conf"
    state: touch
  when: not sysctl_k8s_stat.stat.exists

- name: Add Variables to /etc/sysctl.d/k8s.conf
  ansible.posix.sysctl:
    sysctl_file: "/etc/sysctl.d/k8s.conf"
    sysctl_set: true
    reload: true
    value: '1'
    name: "{{ item }}"
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
    - net.ipv4.ip_forward
  when: not sysctl_k8s_stat.stat.exists

- name: Install yum-utils and versionlock
  ansible.builtin.yum:
    name: 
      - yum-utils-"{{ v_yum_utils }}"
      - python3-dnf-plugin-versionlock-"{{ v_versionlock }}"
    state: present
    update_cache: true

- name: Check if Docker Repo is present
  ansible.builtin.stat:
    path: "/etc/yum.repos.d/docker-ce.repo"
  register: docker_stat

- name: Add Docker Repo
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: "/etc/yum.repos.d/docker-ce.repo"
  when: not docker_stat.stat.exists

- name: When Docker is installed, remove it
  ansible.builtin.yum:
    name:
      - docker
      - docker-client
      - docker-client-latest
      - docker-common
      - docker-latest
      - docker-latest-logrotate
      - docker-logrotate
      - docker-engine
    state: removed

- name: Install containerd from Docker Repo
  ansible.builtin.yum:
    name: containerd.io-"{{ v_containerd }}"
    state: present
    update_cache: true

- name: Install python3-pip package
  ansible.builtin.yum:
    name: python3-pip-"{{ v_pip }}"
    state: present
    update_cache: true

- name: Check if containerd Folder exists
  ansible.builtin.stat:
    path: "/etc/containerd"
  register: containerd_stat

- name: Create containerd dir
  ansible.builtin.file:
    path: "/etc/containerd"
    mode: '0755'
    state: directory
  when: not containerd_stat.stat.exists

- name: Copy containerd Config to Nodes
  ansible.builtin.copy:
    src: containerd-config.toml
    dest: "/etc/containerd/config.toml"
  notify:
    - Restart containerd

- name: Install Pip Modules for Kubernetes
  ansible.builtin.pip:
    name:
      - pyyaml=={{ v_pyyaml }}
      - kubernetes=={{ v_kubernetes }}
      - jsonpatch=={{ v_jsonpatch }}

- name: Stop local Firewall
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: no

- name: Check if /opt/cni/bin exists
  ansible.builtin.stat:
    path: "/opt/cni/bin"
  register: cni_dir_stat

- name: Create /opt/cni/bin folder
  ansible.builtin.file:
    mode: '0755'
    state: directory
    path: "/opt/cni/bin"
  when: not cni_dir_stat.stat.exists

- name: Check if CNI Plugins exists
  ansible.builtin.stat:
    path: "/tmp/cni-plugins-linux-amd64-v{{ v_cni_plugins }}.tgz"
  register: cni_plugins_stat

- name: Download CNI Plugins
  ansible.builtin.get_url:
    url: https://github.com/containernetworking/plugins/releases/download/v{{ v_cni_plugins }}/cni-plugins-linux-amd64-v{{ v_cni_plugins }}.tgz
    dest: "/tmp"
    mode: '0755'
  when: not cni_plugins_stat.stat.exists

- name: Unpack CNI Plugins to /opt/cni/bin
  ansible.builtin.unarchive:
    src: "/tmp/cni-plugins-linux-amd64-v{{ v_cni_plugins }}.tgz"
    dest: "/opt/cni/bin"
    remote_src: true

- name: Disable Swap Storage
  ansible.builtin.shell: |
    sudo swapoff -a
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  when: ansible_swaptotal_mb > 0

- name: Check the state of SELinux
  ansible.builtin.command: getenforce
  register: selinux_stat
  changed_when: false

- name: Set SELinux to permissive mode
  ansible.builtin.shell: |
    sudo setenforce 0
    sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
  when: selinux_stat.stdout != "Permissive"

- name: Check if kubernetes Yum Repo File exists
  ansible.builtin.stat:
    path: "/etc/yum.repos.d/kubernetes.repo"
  register: kubernetes_repo_stat

- name: Create Kubernetes.repo File
  ansible.builtin.file:
    path: "/etc/yum.repos.d/kubernetes.repo"
    state: touch
  when: not kubernetes_repo_stat.stat.exists

- name: Add kubernetes Repo to Repo File
  ansible.builtin.blockinfile:
    path: "/etc/yum.repos.d/kubernetes.repo"
    block: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://pkgs.k8s.io/core:/stable:/v{{ v_kubernetes_repo }}/rpm/
      enabled=1
      gpgcheck=1
      gpgkey=https://pkgs.k8s.io/core:/stable:/v{{ v_kubernetes_repo }}/rpm/repodata/repomd.xml.key

- name: Install kubeadm, kubelet, kubectl
  ansible.builtin.yum:
    name:
      - kubelet-{{ v_kube_packages }}
      - kubeadm-{{ v_kube_packages }}
      - kubectl-{{ v_kube_packages }}
    update_cache: true
    allow_downgrade: true
    state: present
    disable_excludes: repoid
  notify: 
    - Start kubelet

- name: Lock kubeadm, kubelet, kubectl Version
  community.general.yum_versionlock:
    state: present
    name:
      - kubelet
      - kubeadm
      - kubectl

- name: Pause before Continue
  ansible.builtin.pause:
    seconds: 10

